plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.fream'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// ---------------------------
	// Spring Boot Starter
	// ---------------------------
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.kafka:spring-kafka'

	// ---------------------------
	// Spring Boot Test
	// ---------------------------
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// (기본적으로 Boot가 JUnit Jupiter를 포함하므로, 별도 버전 지정은 생략해도 됩니다)

	// ---------------------------
	// Lombok
	// ---------------------------
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// ---------------------------
	// DB
	// ---------------------------
	runtimeOnly 'com.h2database:h2' // H2 in-memory DB (테스트, 개발용)
	// 운영환경에서 MySQL을 사용한다면:
	runtimeOnly 'mysql:mysql-connector-java:8.0.33'

	// ---------------------------
	// 추가 라이브러리
	// ---------------------------
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'com.auth0:java-jwt:3.18.2'
	implementation 'org.jsoup:jsoup:1.16.1'
	implementation 'com.maxmind.geoip2:geoip2:3.0.1'
	implementation 'com.microsoft.playwright:playwright:1.38.0'

	// ---------------------------
	// QueryDSL
	// ---------------------------
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	// Boot 3.x -> jakarta 패키지 버전 사용
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

// 스프링 부트 3.4.x에서는 JUnit Platform이 기본 적용
tasks.named('test') {
	useJUnitPlatform()
}

//
// QueryDSL 설정
//
sourceSets {
	main {
		java {
			srcDirs += file("$buildDir/generated/querydsl")
		}
	}
}

configurations {
	querydsl.extendsFrom compileClasspath
}

tasks.withType(JavaCompile) {
	options.compilerArgs << "-parameters"
	options.annotationProcessorPath = configurations.annotationProcessor
}

// (원하시면 테스트 비활성화나 다른 태스크 설정도 추가 가능)
// e.g. tasks.withType(Test) { enabled = false }
