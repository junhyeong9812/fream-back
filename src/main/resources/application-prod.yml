spring:
  datasource:
    url: jdbc:mysql://mysql:3306/freamdb?serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: create  # 운영환경은 보통 직접 DDL 관리
    properties:
      hibernate:
        format_sql: true
  redis:
    host: redis
    port: 6379
    # password: # 운영 Redis 비번
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com
  kafka:
    bootstrap-servers: kafka:9092
    producer:
      acks: all  # 결제 안정성을 위한 설정
      retries: 3
      enable-idempotence: true  # 멱등성 보장
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
    consumer:
      group-id: "my-group"  # 기본 그룹 (기존 ViewEvent용)
      auto-offset-reset: "earliest"
      enable-auto-commit: false  # 수동 커밋 (결제 처리 확실성)
      max-poll-records: 10
      fetch-min-size: 1024
      fetch-max-wait: 500
    # 결제 관련 추가 설정
    payment:
      consumer:
        processing-group: "payment-processing-group"  # 결제 처리 그룹
        retry-group: "payment-retry-group"            # 결제 재시도 그룹
      topics:
        processing: "payment-processing-topic"        # 결제 처리 토픽
        retry: "payment-retry-topic"                  # 결제 재시도 토픽
      retry:
        max-attempts: 3
        backoff-delay-ms: 1000
  elasticsearch:
    uris: http://elasticsearch:9200

  batch:
    jdbc:
      initialize-schema: never # 운영에선 직접 관리

  # OAuth2 설정 추가
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/google
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - profile_image
              - account_email
            client-name: Kakao
            client-authentication-method: client_secret_post
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
kibana:
  url: https://www.pinjun.xyz/kibana

logging:
  level:
    org.hibernate.SQL: debug
    org.springframework.security: DEBUG
    com.fream: INFO  # 프로젝트 패키지에 맞게 수정
    org.apache.kafka: INFO  # Kafka 로깅 레벨
  file:
    name: /logs/spring-app.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30
      total-size-cap: 3GB

jwt:
  secret: ${JWT_SECRET}
  token-validity-in-seconds: 86400 # 24시간

imp:
  key: ${IMP_KEY}
  secret: ${IMP_SECRET}
  pg: ${IMP_PG} # PG사와 가맹점 ID
  storeId: ${IMP_STOREID}

personal-data:
  encryption:
    secret-key: ${PERSONAL_ENCRYPTION_KEY}
    iv: ${PERSONAL_ENCRYPTION_IV}

openai:
  api:
    key: ${OPENAPI_KEY}  # 실제 API 키로 대체 필요
    url: https://api.openai.com/v1/chat/completions
  model: gpt-3.5-turbo

server:
  use-forward-headers: true

# 결제 도메인 관련 설정 추가
payment:
  encryption:
    # 개발/테스트 환경용 하드코딩 암호화 키 (실제 운영 환경에서는 환경변수로 교체 필요)
    secret-key: "dev_payment_encryption_secret_key_12345"
    salt: "dev_payment_salt_value_for_testing_only"
    iv: "dev0123456789abc" # 초기화 벡터는 16바이트
  card-info:
    max-count: 5 # 사용자당 최대 등록 가능한 카드 정보 수
  retry:
    max-attempts: 3 # 결제 실패 시 최대 재시도 횟수
    delay-ms: 1000 # 재시도 간격 (밀리초)
  logging:
    mask-sensitive-data: true # 민감 정보 마스킹 활성화 여부
  api:
    timeout: 10000 # 외부 API 호출 타임아웃 (밀리초)
  # Kafka 결제 처리 관련 설정
  kafka:
    enabled: true  # Kafka 결제 처리 활성화 여부
    topics:
      processing: "payment-processing-topic"
      retry: "payment-retry-topic"
    consumer:
      processing-group: "payment-processing-group"
      retry-group: "payment-retry-group"
      concurrency: 1  # 동시 처리 수 (결제는 순차 처리 권장)
    producer:
      timeout-ms: 5000
    retry:
      max-attempts: 3
      backoff-multiplier: 2
      initial-delay-ms: 1000

# weather 도메인 설정
weather:
  api:
    url: https://api.open-meteo.com/v1/forecast
    params:
      latitude: 36.5
      longitude: 127.75
      hourly: temperature_2m,precipitation_probability,precipitation,rain,snowfall
      timezone: auto
  scheduler:
    # 24시간(86400000 밀리초) 간격으로 갱신
    interval: 86400000
    # 초기 지연 시간 (서버 시작 후 10초 대기)
    initial-delay: 10000
  data:
    # 한 번에 처리할 시간 개수 (48시간)
    hours-count: 48

# AccessLog 도메인 설정
access-log:
  use-kafka: false  # false로 설정하여 직접 DB에 저장
  geoip:
    database-path: classpath:GeoLite2-City.mmdb
  kafka:
    topic: user-access-log-topic
    group-id: user-access-log-group