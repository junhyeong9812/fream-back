user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';
    access_log /dev/stdout main;
    error_log  /dev/stderr warn;

    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;

    # SSL/TLS 설정 시 필요
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # 캐시 영역 (API 응답용, 필요시)
    proxy_cache_path /var/cache/nginx/products
                     levels=1:2
                     keys_zone=cache_products:10m
                     inactive=10m
                     max_size=1g;

    proxy_cache_path /var/cache/nginx/styles
                     levels=1:2
                     keys_zone=cache_styles:10m
                     inactive=10m
                     max_size=1g;

    proxy_cache_path /var/cache/nginx/es_products
                     levels=1:2
                     keys_zone=cache_es:10m
                     inactive=10m
                     max_size=1g;

    map $query_string $bypass_products_cache {
        default 0;
    }
    map $query_string $bypass_styles_cache {
        ""       0;
        default  1;
    }

    # 80번 포트: HTTP
    server {
        listen 80;
        server_name www.pinjun.xyz;

        # Certbot webroot 인증용
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # 그 외 요청은 HTTPS로 리다이렉트
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # 443번 포트: HTTPS
    server {
        listen 443 ssl;
#         http2;
        server_name www.pinjun.xyz;

        # SSL 인증서( Certbot 으로 발급 )
        ssl_certificate     /etc/letsencrypt/live/www.pinjun.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.pinjun.xyz/privkey.pem;

        # (선택) HTTP/2, TLS 설정
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_prefer_server_ciphers on;

        # -------------------------------------------
        # 1) 리액트 정적 파일 서빙
        # -------------------------------------------
        # 예: Dockerfile에서 `COPY build/ /usr/share/nginx/html`
        #     SPA 라우팅을 위해 try_files로 index.html fallback
        root /usr/share/nginx/html;
        index index.html;

         # (1) / -> front 컨테이너(80)
        location / {
            proxy_pass http://front:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # -------------------------------------------
        # 2) /api/ 이하 요청 → 스프링 부트 프록시
        # -------------------------------------------
        location /api/ {
            proxy_pass http://app:8080/;   # app 컨테이너(8080)
            #proxy_pass http://app:8080;로 하면 /api를 붙여서 보냄
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;  # 추가
        }

        # (필요 시) API 캐싱 예시
        location /api/products {
            proxy_pass http://app:8080/products;
            proxy_cache            cache_products;
            proxy_cache_valid      200 10m;
            proxy_cache_valid      404 1m;
            add_header             X-Cache-Status $upstream_cache_status;
            proxy_cache_key        "$scheme://$host$request_uri";
            proxy_ignore_headers   Cache-Control Expires;
        }

        # (필요 시) purge endpoints
        location ~ /purge_products(/.*) {
            allow all;
            proxy_cache_purge cache_products $scheme$host$1;
        }

        # 예시: /api/styles/queries, /api/es/products 등도 동일하게 설정
        # ...

    }
}
