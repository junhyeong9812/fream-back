version: '3.8'
services:
  # 운영용 MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: freamdb
      MYSQL_USER: fream
      MYSQL_PASSWORD: fream
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  elasticsearch:
    build:
      context: ../../
      dockerfile: docker/elasticsearch/Dockerfile-elasticsearch
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data_prod:/usr/share/elasticsearch/data
      - ./es_logs:/usr/share/elasticsearch/logs
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"

  nginx:
    build:
      context: ../../
      dockerfile: docker/nginx/Dockerfile-nginx
    image: custom-nginx:1.0
    container_name: nginx_server
    ports:
      - "80:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 실제 운영용 Spring Boot 컨테이너
  app:
    build:
      context: ../../
      dockerfile: docker/Dockerfile
    container_name: spring_boot_app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - mysql
      - redis
      - kafka
      - elasticsearch

volumes:
  mysql_data:
  es_data_prod:
