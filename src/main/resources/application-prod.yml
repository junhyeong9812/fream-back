spring:
  datasource:
    url: jdbc:mysql://mysql:3306/freamdb?serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: create  # 운영환경은 보통 직접 DDL 관리
    properties:
      hibernate:
        format_sql: true
  redis:
    host: redis
    port: 6379
    # password: # 운영 Redis 비번
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: "my-group"
      auto-offset-reset: "earliest"
  elasticsearch:
     uris: http://elasticsearch:9200

  batch:
    jdbc:
      initialize-schema: never # 운영에선 직접 관리
#  autoconfigure:
#    exclude:
#      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
#      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration

  # OAuth2 설정 추가
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/google
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - profile_image
              - account_email
            client-name: Kakao
            client-authentication-method: client_secret_post
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
kibana:
  url: https://www.pinjun.xyz/kibana
#management:
#  endpoints:
#    web:
#      exposure:
#        include: health,info,prometheus,metrics
#  metrics:
#    export:
#      prometheus:
#        enabled: true
#
#grafana:
#  url: https://www.pinjun.xyz/grafana

logging:
  level:
    org.hibernate.SQL: debug
    org.springframework.security: DEBUG
    com.fream: INFO  # 프로젝트 패키지에 맞게 수정
  file:
    name: /logs/spring-app.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30
      total-size-cap: 3GB

jwt:
  secret: ${JWT_SECRET}
  token-validity-in-seconds: 86400 # 24시간

imp:
  key: ${IMP_KEY}
  secret: ${IMP_SECRET}
  pg: ${IMP_PG} # PG사와 가맹점 ID
  storeId: ${IMP_STOREID}

openai:
  api:
    key: ${OPENAPI_KEY}  # 실제 API 키로 대체 필요
    url: https://api.openai.com/v1/chat/completions
  model: gpt-3.5-turbo

server:
  use-forward-headers: true

# weather 도메인 설정
weather:
  api:
    url: https://api.open-meteo.com/v1/forecast
    params:
      latitude: 36.5
      longitude: 127.75
      hourly: temperature_2m,precipitation_probability,precipitation,rain,snowfall
      timezone: auto
  scheduler:
    # 24시간(86400000 밀리초) 간격으로 갱신
    interval: 86400000
    # 초기 지연 시간 (서버 시작 후 10초 대기)
    initial-delay: 10000
  data:
    # 한 번에 처리할 시간 개수 (48시간)
    hours-count: 48

# AccessLog 도메인 설정
access-log:
  use-kafka: false  # false로 설정하여 직접 DB에 저장
  geoip:
    database-path: classpath:GeoLite2-City.mmdb
  kafka:
    topic: user-access-log-topic
    group-id: user-access-log-group