spring:
  datasource:
    url: jdbc:mysql://mysql:3306/freamdb?serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: create  # 운영환경은 보통 직접 DDL 관리
    properties:
      hibernate:
        format_sql: true
  redis:
    host: redis
    port: 6379
    # password: # 운영 Redis 비번
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: "my-group"
      auto-offset-reset: "earliest"
  elasticsearch:
     uris: http://elasticsearch:9200

  batch:
    jdbc:
      initialize-schema: never # 운영에선 직접 관리
#  autoconfigure:
#    exclude:
#      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
#      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration

  # OAuth2 설정 추가
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/google
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: https://www.pinjun.xyz/api/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

logging:
  level:
    org.hibernate.SQL: debug
    org.springframework.security: DEBUG

jwt:
  secret: ${JWT_SECRET}
  token-validity-in-seconds: 86400 # 24시간

imp:
  key: ${IMP_KEY}
  secret: ${IMP_SECRET}
  pg: ${IMP_PG} # PG사와 가맹점 ID
  storeId: ${IMP_STOREID}

openai:
  api:
    key: ${OPENAPI_KEY}  # 실제 API 키로 대체 필요
    url: https://api.openai.com/v1/chat/completions
  model: gpt-3.5-turbo

server:
  use-forward-headers: true
