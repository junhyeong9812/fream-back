#name: CI/CD for fream-back
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  build-and-push:
#    runs-on: ubuntu-latest
#    steps:
#      # 1) Checkout
#      - name: Check out the repository
#        uses: actions/checkout@v3
#
#      # 2) Set up JDK
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'   # 여기에 distribution
#          java-version: 17
#
#      - name: Grant execution permission for gradlew
#        run: chmod +x gradlew
#
#      # 3) Gradle build
#      - name: Build and Test
#        run: |
#          ./gradlew clean build -x test
#      # -- 위처럼 -x test 옵션을 주어 테스트를 완전히 스킵합니다.
##      ./gradlew clean build -Dspring.profiles.active=test
#      # -- test 프로필에서 H2를 사용해 DB문제 없이 테스트
#
#      # 4) Login to GHCR
#      - name: Log in to GitHub Container Registry
#        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
#
#      # 5) Docker build
#      - name: Build Docker Image
#        run: |
#          docker build -f ./docker/Dockerfile -t ghcr.io/junhyeong9812/fream-back:latest .
#
#      # 6) Docker push
#      - name: Push Docker Image
#        run: |
#          docker push ghcr.io/junhyeong9812/fream-back:latest
#
#  deploy:
#    needs: [build-and-push]
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - name: SSH to EC2
#        uses: appleboy/ssh-action@v0.1.8
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USER }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            cd /home/ubuntu/fream-back/docker/prod
#            docker-compose -f docker-compose.prod.yml pull app   # pull ghcr.io/junhyeong9812/fream-back:latest
#            docker-compose -f docker-compose.prod.yml up -d app
#            docker image prune -f
