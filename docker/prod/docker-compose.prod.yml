version: '3.8'
services:
  mysql:
    build:
      context: ../..
      dockerfile: docker/mysql/Dockerfile-mysql
    container_name: mysql_prod
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: freamdb
      MYSQL_USER: fream
      MYSQL_PASSWORD: fream
      TZ: Asia/Seoul
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql

  redis:
    build:
      context: ../..
      dockerfile: docker/redis/Dockerfile-redis
    container_name: redis_prod
    environment:
      TZ: Asia/Seoul
    ports:
      - "6379:6379"

  zookeeper:
    build:
      context: ../..
      dockerfile: docker/kafka/Dockerfile-zookeeper
    container_name: zookeeper_prod
    environment:
      TZ: Asia/Seoul
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    build:
      context: ../..
      dockerfile: docker/kafka/Dockerfile-kafka
    container_name: kafka_prod
    depends_on:
      - zookeeper
    environment:
      TZ: Asia/Seoul
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_prod:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_prod:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  elasticsearch:
    build:
      context: ../..
      dockerfile: docker/elasticsearch/Dockerfile-elasticsearch
    container_name: es_prod
    environment:
      TZ: Asia/Seoul
      discovery.type: single-node
      xpack.security.enabled: 'false'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data_prod:/usr/share/elasticsearch/data
      - /home/ubuntu/es_logs:/usr/share/elasticsearch/logs
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    build:
      context: ../..
      dockerfile: docker/elasticsearch/Dockerfile-kibana
    container_name: kibana_prod
    depends_on:
      - elasticsearch
    environment:
      TZ: Asia/Seoul
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_BASEPATH: /kibana
      SERVER_REWRITEBASEPATH: true
    ports:
      - "5601:5601"

  nginx:
    build:
      context: ../..
      dockerfile: docker/prod/nginx/Dockerfile-nginx-prod
    container_name: nginx_prod
    ports:
      - "80:80"
      - "443:443"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      TZ: Asia/Seoul
    depends_on:
      - mysql
      - redis
      - kafka
      - elasticsearch
      - front
      - app
      - certbot
#      - stt_tts
    volumes:
      - letsencrypt_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot

  app:
    image: ghcr.io/junhyeong9812/fream-back:latest
    container_name: spring_boot_app_prod
    ports:
      - "8080:8080"
    environment:
      TZ: Asia/Seoul
      SPRING_PROFILES_ACTIVE: prod
    env_file:
      - .env
    depends_on:
      - mysql
      - redis
      - kafka
      - elasticsearch
    volumes:
      - /home/ubuntu/fream:/home/ubuntu/fream
      - /home/ubuntu/springlog:/logs
  front:
    image: ghcr.io/junhyeong9812/fream-front:latest
    environment:
      TZ: Asia/Seoul
    container_name: fream_front_prod
    depends_on:
      - app  # optional
  # certbot (선택)
  certbot:
    build:
      context: ../..
      dockerfile: docker/prod/nginx/certbot/Dockerfile-certbot
    container_name: certbot_prod
    environment:
      TZ: Asia/Seoul
    volumes:
      - letsencrypt_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM;
      certbot certonly --webroot --webroot-path=/var/www/certbot
      -d www.pinjun.xyz --email pickjog@naver.com --agree-tos --no-eff-email --force-renewal;
      while :; do sleep 12h; certbot renew -q; done"

  cache-cleaner:
    image: alpine:latest
    container_name: cache_cleaner_prod
    depends_on:
      - elasticsearch
      - redis
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
      echo '0 2 * * * sh /scripts/clear_caches.sh' > /etc/crontabs/root &&
      crond -f
      "
  # 새로운 모니터링 서비스들 추가
#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus_prod
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    ports:
#      - "9090:9090"
#    environment:
#      TZ: Asia/Seoul
#    deploy:
#      resources:
#        limits:
#          memory: 400M
#
#  node-exporter:
#    image: prom/node-exporter
#    container_name: node_exporter_prod
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#    ports:
#      - "9100:9100"
#    environment:
#      TZ: Asia/Seoul
#    deploy:
#      resources:
#        limits:
#          memory: 50M
#
#  nginx-prometheus-exporter:
#    image: nginx/nginx-prometheus-exporter
#    container_name: nginx_exporter_prod
#    command:
#      - '-nginx.scrape-uri=http://nginx:80/stub_status'
#    ports:
#      - "9113:9113"
#    depends_on:
#      - nginx
#    environment:
#      TZ: Asia/Seoul
#    deploy:
#      resources:
#        limits:
#          memory: 50M
#
#  loki:
#    image: grafana/loki
#    container_name: loki_prod
#    ports:
#      - "3100:3100"
#    volumes:
#      - loki_data:/loki
#    environment:
#      TZ: Asia/Seoul
#    deploy:
#      resources:
#        limits:
#          memory: 300M
#
#  promtail:
#    image: grafana/promtail
#    container_name: promtail_prod
#    volumes:
#      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
#      - /var/log/nginx:/var/log/nginx:ro
#    command:
#      - '-config.file=/etc/promtail/config.yml'
#    environment:
#      TZ: Asia/Seoul
#    deploy:
#      resources:
#        limits:
#          memory: 100M
#
#  grafana:
#    image: grafana/grafana
#    container_name: grafana_prod
#    volumes:
#      - grafana_data:/var/lib/grafana
#    ports:
#      - "3000:3000"
#    environment:
#      TZ: Asia/Seoul
#      GF_SERVER_ROOT_URL: https://www.pinjun.xyz/grafana
#      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
#    depends_on:
#      - prometheus
#      - loki
#    deploy:
#      resources:
#        limits:
#          memory: 200M



volumes:
  mysql_data_prod:
  es_data_prod:
  letsencrypt_data:
  certbot_www:
#  prometheus_data:
#  grafana_data:
#  loki_data:

